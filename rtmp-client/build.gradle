apply plugin: "com.android.library"


android {

    ndkVersion '21.0.6113669'
    compileSdkVersion  29 // sdk level 21 lets ndk generate resources for archs such as arm64.
    buildToolsVersion  "28.0.3"
    defaultConfig {
        // applicationId "io.antmedia.rtmpclient"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions"
                arguments '-DANDROID_PLATFORM=android-21'
                abiFilters 'x86', 'x86_64',  'armeabi-v7a', 'arm64-v8a' //, 'armeabi','mips', 'mips64'
            }
        }
    }



    buildTypes {
        release {
            minifyEnabled  false
            proguardFiles.add(file("proguard-rules.pro"))
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"

        }
    }
}




//android.
//ndk {
//    moduleName = "rtmp-jni"
    // cppFlags.addAll(["-I${file("src/main/jni/native_app_glue")}".toString(),
    //                  "-I${file("src/main/jni/cpufeatures")}".toString(),
    //                 "-I${file("src/main/jni/ndk_helper")}".toString()])
    // CFlags is configured in similar way as cppFlags
//    CFlags.add("-DNO_CRYPTO".toString())
//    CFlags.add("-I${file("src/main/jni/librtmp")}".toString())
//    ldLibs.add("log")



//}

android.productFlavors {
    // for detailed abiFilter descriptions, refer to "Supported ABIs" @
    // https://developer.android.com/ndk/guides/abis.html#sa
    // build one including all productFlavors


    /*
    create("fat") {
        ndk.with {
        // You can customize the NDK configurations for each
        // productFlavors and buildTypes.
        abiFilters.add("armeabi")
        abiFilters.add("armeabi-v7a")
        abiFilters.add("arm64-v8a")
        abiFilters.add("mips")
        abiFilters.add("x86")

            abiFilters 'arm64-v8a', 'armeabi-v7a'
        }

    }
     */


}



ext {
    bintrayRepo = 'maven'
    bintrayName = 'rtmp-client'

    publishedGroupId = 'net.butterflytv.utils'
    libraryName = 'rtmp-client'
    artifact = 'rtmp-client'

    libraryDescription = 'RTMP Client for Android. It supports all architectures with 300KB total size'

    siteUrl = 'https://github.com/ButterflyTV/Librtmp-Client-for-Android'
    gitUrl = 'https://github.com/ButterflyTV/LibRtmp-Client-for-Android.git'

    libraryVersion = '3.1.1-dev'

    developerId = 'mekya'
    developerName = 'Ahmet Oguz Mermerkaya'
    developerEmail = 'ahmetmermerkaya@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

dependencies {

}

/////////////////////////////////////////////////////
apply plugin: "com.jfrog.bintray"

version = libraryVersion

task sourcesJar(type: Jar) {
    from "src/main/java"
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = "src/main/java"
    // classpath += project.files(getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}


// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}

apply plugin: 'com.github.dcendents.android-maven'

group = publishedGroupId                               // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

//How to upload
//./gradlew install
//./gradlew bintrayUpload



